<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
   
    http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--  
    Create a static network of brokers
    For more information, see:
    
    http://activemq.apache.org/networks-of-brokers.html
    
    To run this example network of ActiveMQ brokers run
    
    $ bin/activemq console xbean:conf/activemq-static-network-broker1.xml
    
    and
    
    $ bin/activemq console xbean:conf/activemq-static-network-broker2.xml
    
    in separate consoles
 -->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd   
  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="<%= node[:thethrum][:fqdn] %>" dataDirectory="${activemq.base}/data">
	<destinationInterceptors>
  	  <virtualDestinationInterceptor>
    	    <virtualDestinations>
      	    <compositeQueue name="social.analytic.queue">
            <forwardTo>
              <queue physicalName="social.analytic.kontagent" />
              <queue physicalName="social.analytic.internal" />
            </forwardTo>
            </compositeQueue>
       	    </virtualDestinations>
  	  </virtualDestinationInterceptor>
	</destinationInterceptors>

        <!-- Destination specific policies using destination names or wildcards -->
        <destinationPolicy>
            <policyMap>
                <policyEntries>
                    <policyEntry queue=">" producerFlowControl="false" memoryLimit="100mb">
		      <!-- 
			 Tell the dead letter strategy not to process expired messages
			 so that they will just be discarded instead of being sent to
			 the DLQ 
			 Also, use a topic even for DLQ Q messages so they don't pile up.
			-->
                        <deadLetterStrategy>
                          <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="false" processExpired="false"/>
                        </deadLetterStrategy>
                    </policyEntry>
                    <policyEntry topic=">" producerFlowControl="false" memoryLimit="100mb">
                    </policyEntry>
                </policyEntries>
            </policyMap>
        </destinationPolicy>

        <!-- Use the following to configure how ActiveMQ is exposed in JMX -->
        <managementContext>
          <managementContext createConnector="true" connectorPort="9003" jmxDomainName="thethrum.com"/>
        </managementContext>

        <!-- 
            The store and forward broker networks ActiveMQ will listen to.
            We'll leave it empty as duplex network will be configured by another broker
            Take a look at activemq-static_network-broker2.xml for example
        -->
        <networkConnectors>
	              <networkConnector uri="static:(tcp://<%= @master %>:61616)"/>
        </networkConnectors>
        
        <persistenceAdapter>
            <kahaDB directory="${activemq.base}/data/kahadb" />
        </persistenceAdapter>
        
        <!--  The maximum amount of space the broker will use before slowing down producers -->
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="4096 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="4 gb" name="foo"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!-- The transport connectors ActiveMQ will listen to -->
        <transportConnectors>
            <transportConnector name="nio" uri="tcp://0.0.0.0:61616"/>
        </transportConnectors>
        
    </broker>

</beans>
